// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: PublicBroadcastMessage.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

//
// Copyright Â© 2019 IZE Ltd. and the project authors
// Licensed under MIT License
//
// See LICENSE.txt for license information.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct PublicBroadcastMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The bytes of the UUID of the message in little endian order. Required for
  /// routing. If a received message is missing this field then it's ignored and
  /// discarded.
  public var uuidBytes: Data {
    get {return _storage._uuidBytes}
    set {_uniqueStorage()._uuidBytes = newValue}
  }

  /// The time to live (hop limit) of the message. Recommended for routing with a
  /// default value of 15.
  public var timeToLive: Int32 {
    get {return _storage._timeToLive}
    set {_uniqueStorage()._timeToLive = newValue}
  }

  /// The source user of the message.
  public var sourceUser: User {
    get {return _storage._sourceUser ?? User()}
    set {_uniqueStorage()._sourceUser = newValue}
  }
  /// Returns true if `sourceUser` has been explicitly set.
  public var hasSourceUser: Bool {return _storage._sourceUser != nil}
  /// Clears the value of `sourceUser`. Subsequent reads from it will return its default value.
  public mutating func clearSourceUser() {_uniqueStorage()._sourceUser = nil}

  /// The payload of the message.
  public var payload: Data {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PublicBroadcastMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "PublicBroadcastMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "uuid_bytes"),
    2: .standard(proto: "time_to_live"),
    3: .standard(proto: "source_user"),
    4: .same(proto: "payload"),
  ]

  fileprivate class _StorageClass {
    var _uuidBytes: Data = SwiftProtobuf.Internal.emptyData
    var _timeToLive: Int32 = 0
    var _sourceUser: User? = nil
    var _payload: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _uuidBytes = source._uuidBytes
      _timeToLive = source._timeToLive
      _sourceUser = source._sourceUser
      _payload = source._payload
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._uuidBytes)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._timeToLive)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._sourceUser)
        case 4: try decoder.decodeSingularBytesField(value: &_storage._payload)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._uuidBytes.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._uuidBytes, fieldNumber: 1)
      }
      if _storage._timeToLive != 0 {
        try visitor.visitSingularInt32Field(value: _storage._timeToLive, fieldNumber: 2)
      }
      if let v = _storage._sourceUser {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._payload.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._payload, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PublicBroadcastMessage, rhs: PublicBroadcastMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._uuidBytes != rhs_storage._uuidBytes {return false}
        if _storage._timeToLive != rhs_storage._timeToLive {return false}
        if _storage._sourceUser != rhs_storage._sourceUser {return false}
        if _storage._payload != rhs_storage._payload {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
